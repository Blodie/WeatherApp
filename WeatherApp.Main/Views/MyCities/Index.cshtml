@using WeatherApp.Main.Controllers

@model List<WeatherViewModel>

<h1>Current Weather and Forecasts</h1>
<hr />
<h3>Add City</h3>
<input id="cityName" type="text" />
<button type="button" class="btn btn-primary" onclick="selectCity(event)">Add</button>
<div id="spinner" class="spinner-border d-none" role="status"></div>
<hr />

<table class="table table-bordered">
    <thead class="thead-dark">
        <tr>
            <th>Favorite</th>
            <th>City</th>
            <th>Current Temperature (C)</th>
            <th>Description</th>
            <th></th>
        </tr>
    </thead>
    <tbody id=main-body>
        @foreach (var weatherVM in Model.OrderByDescending(weatherVM => weatherVM.IsFavorite))
        {
            <tr id="current-@weatherVM.CityId" onclick="toggleForecasts(event, @weatherVM.CityId)" class="current-weather hoverable">
                <td><input class="form-check-input" type="checkbox" checked="@weatherVM.IsFavorite" onclick="event.stopPropagation()" onchange="toggleFavorite(event, @weatherVM.CityId)"></td>
                <td>@weatherVM.CityName</td>
                <td>@weatherVM.CurrentWeather.TempC</td>
                <td>@weatherVM.CurrentWeather.Description</td>
                <td><button type="button" class="btn btn-sm btn-danger float-end" onclick="deselectCity(event, @weatherVM.CityId)">Delete</button></td>
            </tr>
            <tr id="forecast-@weatherVM.CityId" class="forecast collapsable">
                <td colspan="4">
                    <div>
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Min Temp (C)</th>
                                    <th>Avg Temp (C)</th>
                                    <th>Max Temp (C)</th>
                                    <th>Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var forecast in weatherVM.WeatherForecasts)
                                {
                                    <tr>
                                        <td>@forecast.ValidDate.ToShortDateString()</td>
                                        <td>@forecast.MinTempC</td>
                                        <td>@forecast.AvgTempC</td>
                                        <td>@forecast.MaxTempC</td>
                                        <td>@forecast.Description</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </td>
            </tr>

        }
    </tbody>
</table>

<script>
    function toggleForecasts(event, id){
        const forecastElement = document.querySelector(`#forecast-${id}`);
        const isOpened = forecastElement.classList.contains('opened');
        if (isOpened) {
            forecastElement.classList.remove('opened');
        } else {
            forecastElement.classList.add('opened');
        }
    }

    async function selectCity(event){
        event.target.disabled = true;
        document.querySelector('#spinner').classList.remove("d-none");
        const name = document.querySelector('#cityName').value;

        await fetch('@Url.Action(nameof(MyCitiesController.SelectCity))', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({name})
        });

        window.location.reload();
    }

    async function deselectCity(event, id){
        event.target.disabled = true;
        event.stopPropagation();
        await fetch('@Url.Action(nameof(MyCitiesController.DeselectCity))', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({id})
        });
        document.querySelector(`#current-${id}`).remove();
        document.querySelector(`#forecast-${id}`).remove();
    }

    async function toggleFavorite(event, id){
        event.stopPropagation();
        await fetch('@Url.Action(nameof(MyCitiesController.ToggleFavoriteCity))', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({id})
        });

        window.location.reload();
    }
</script>
